from machine import Pinfrom time import sleepfrom pins import MOTOR_PINSclass MOTOR():    def __init__(self, rev = 'full'):        self.step_states = [            [[1,0,0,0 ],[1,1,0,0 ],[0,1,0,0 ],[0,1,1,0 ],[0,0,1,0 ],[0,0,1,1 ],[0,0,0,1 ],[1,0,0,1 ]],            [[1,0,0,1],[1,1,0,0],[0,1,1,0],[0,0,1,1]]            ][0  if rev=='full' else 1]        self.ROTATION_FULL = 4096 / (1 if rev=='full' else 2)        self.PINS = MOTOR_PINS #[5,0,4,2]        self.pins = []        self.step_state =  0        self.step_numstates = len(self.step_states)        self.setup(rev)    def setup(self, rev):        for p in self.PINS:            self.pins.append(Pin(p,  Pin.OUT))        print ('motor  initiated for {} rev, size {}'.format(rev, self.step_numstates))    def stop(self):        "all to 0"        for p in self.pins: p.low()        self.step_state = 0        print ('stopped')    def step(self, direction=1 ):        self.step_state = self.step_state + direction        if self.step_state > self.step_numstates:            self.step_state = 1        elif self.step_state < 1:            self.step_state = self.step_numstates        # write the current state to the pins        for i in range(0,4):            self.pins[i].value(self.step_states[self.step_state-1][i])    def go(self, degrees=360, delay=1.01):        direction = 1 if degrees > 0  else -1        steps = abs(int(self.ROTATION_FULL * degrees / 360))        print ('degrees', degrees, 'steps ', steps, 'direction ', direction , 'delay [ms] ', delay)        for st in range(0,steps):            self.step(direction)            sleep(delay/1000)        self.stop()        self.report = '{} degrees {} - OK'.format(abs(degrees), 'anticlockwise' if direction==1 else  'clockwise')        def api(self, value=[180,1.01]):         "api"        value = [float(i) for i in value]        if len(value) == 1: value = [value[0], 1.01]        self.go(value[0], value[1])        return self.report def motor(value = [180,1.01]):    value = [float(i) for i in value]    if len(value) == 1: value = [value[0], 1.01]    m = MOTOR('half')    m.go(value[0], value[1])    r = m.report    del m    print ('motor deleted')    return r